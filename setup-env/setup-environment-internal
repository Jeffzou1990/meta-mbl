#!/bin/bash
# -*- mode: shell-script-mode; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Based on: setup-environment-internal
# In open-source project: https://github.com/96boards/oe-rpb-manifest
#
# Original file: Copyright (C) 2012-13 O.S. Systems Software LTDA.
# Modifications: Copyright (c) 2018-2019 Arm Limited and Contributors. All rights reserved.
#
# SPDX-License-Identifier: GPL-2.0-only
#
# Authored-by:  Otavio Salvador <otavio@ossystems.com.br>
# Adopted to Angstrom:  Khem Raj <raj.khem@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

DEFAULT_DISTRO="mbl-development"

##############################################################################
# Usage output
usage () {
    cat <<EOF

Usage: [MACHINE=<MACHINE>] [DISTRO=<DISTRO>] source setup-environment [BUILDDIR]

If no MACHINE is set, list all MBL machine options.
If no DISTRO is set, it will be set to $DEFAULT_DISTRO.
If no BUILDIR is set, it will be set to build-<DISTRO>.

EOF
}

##############################################################################
# Set that the EULA is accepted in the auto.conf and create a local flag file
mbl_eula_accept () {
    local EULA_ACCEPT_ENV_VAR=$1
    local EULA_ACCEPT_BB_VAR=$2
    local EULA_ACCEPT_BB_VALUE=$3

    # Remove any previous setting of the EULA variable
    sed -i "/${EULA_ACCEPT_BB_VAR}/d" conf/auto.conf
    # Set the EULA variable and value in auto.conf
    echo "${EULA_ACCEPT_BB_VAR} = \"${EULA_ACCEPT_BB_VALUE}\"" >> conf/auto.conf
    # Create a file to indicate that the EULA was already accepted
    touch "${EULA_ACCEPT_ENV_VAR}"
}

##############################################################################
# Remove any EULA acceptance from the auto.conf and remove any local flag file
mbl_eula_reject () {
    local EULA_ACCEPT_ENV_VAR=$1
    local EULA_ACCEPT_BB_VAR=$2

    # Remove any previous setting of the EULA variable
    sed -i "/${EULA_ACCEPT_BB_VAR}/d" conf/auto.conf
    # Remove the file to indicating that the EULA was already accepted
    rm -f "${EULA_ACCEPT_ENV_VAR}"
}

##############################################################################
# Handle EULA if needed.
#
# We assume that there can only be a single EULA for the current MACHINE and
# that the EULA can be accepted by writing a value to a BitBake variable in the
# config (auto.conf).
#
# If we find a EULA for the current MACHINE then, by default, we prompt the
# user to accept the EULA, and if they accept, we record this by setting a
# BitBake variable to some value.
#
# Alternatively, this script will automatically accept the EULA for a MACHINE
# if the environment variable ACCEPT_EULA_${MACHINE_STR} is non-empty, where
# ${MACHINE_STR} is the name of the MACHINE with all hyphens and the "-mbl"
# suffix removed.
#
# The location of the EULA, the name of the BitBake variable and the value to
# write to that variable are, in general, MACHINE (or at least BSP) dependent.
# The "case" statement below is used to define these three things for each
# MACHINE.
#
# The default case is a general pattern for EULA path, BitBake variable, and
# value that was used by this script before it was adopted by MBL OS. This
# scheme is used by e.g. meta-qcom.
#
# The proper OE way of dealing with commercial licenses and EULAs (using
# LICENSE_FLAGS and LICENSE_FLAGS_WHITELIST) is not supported here - MBL OS
# does not yet support any MACHINES with BSPs that use LICENSE_FLAGS, and in
# any case, it would be difficult to actually find the relevant EULAs and
# accept them before starting a build.
#
# FIXME: there is a potential issue if the same $MACHINE is set in more than
# one layer.. but we should assert that earlier
mbl_eula_handle () {
    # Get the MACHINE without the -mbl suffix
    local NON_MBL_MACHINE="${MACHINE%-mbl}"

    local EULA_ACCEPT_ENV_VAR
    local EULA_PATH
    local EULA_ACCEPT_BB_VAR
    local EULA_ACCEPT_BB_VALUE

    # Remove any '-' since we are constructing an environment variable name
    EULA_ACCEPT_ENV_VAR="$(echo "ACCEPT_EULA_${NON_MBL_MACHINE}" | sed 's/-//g')"

    case "$NON_MBL_MACHINE" in
        # MBL OS also supports imx7s-warp from meta-freescale, but we don't
        # use recipes for those MACHINEs that require acceptance of a EULA.
        # If we start using recipes covered by a EULA without updating this
        # code then those recipes will fail to build due to the missing
        # ACCEPT_FSL_EULA variable.
    imx8mmevk|imx7d-pico|imx6ul-pico)
        EULA_PATH="../layers/meta-fsl-bsp-release/imx/EULA.txt"
        EULA_ACCEPT_BB_VAR="ACCEPT_FSL_EULA"
        EULA_ACCEPT_BB_VALUE="1"
        ;;
    *)
        EULA_PATH=$(find ../layers -path "*/conf/eula/${NON_MBL_MACHINE}" -print | grep -v scripts | grep -v openembedded-core | grep -v meta-linaro || true)
        EULA_ACCEPT_BB_VAR="ACCEPT_EULA_${NON_MBL_MACHINE}"
        EULA_ACCEPT_BB_VALUE="1"
        ;;
    esac

    if [ -z "$EULA_PATH" ]; then
        # No EULA to accept
        return 0
    fi
    if [ -f "${EULA_ACCEPT_ENV_VAR}" ]; then
        # EULA has already been accepted
        return 0
    fi

    # Check if the ACCEPT_EULA_MACHINE env var is set
    # NOTE: indirect reference / dynamic variable
    if [ -n "${!EULA_ACCEPT_ENV_VAR}" ]; then
        # The EULA_ACCEPT_ENV_VAR variable is set in the environment, so we
        # just configure EULA_ACCEPT_BB_VAR in auto.conf
        mbl_eula_accept "${EULA_ACCEPT_ENV_VAR}" "${EULA_ACCEPT_BB_VAR}" "${EULA_ACCEPT_BB_VALUE}"
        return 0
    fi

    # EULA has not been accepted - so ask the user to accept it
    cat <<EOF

The BSP for $NON_MBL_MACHINE depends on packages and firmware which are
covered by an End User License Agreement (EULA). To have the right to use
these binaries in your images, you need to read and accept the following...

EOF

    local REPLY
    local READ_EULA=0
    local EULA_REJECTED=0
    local REJECT_COUNT=0

    # Ask the user to read the EULA, if they don't the EULA is rejected
    while [ -z "$REPLY" ]; do
        echo -n "Would you like to read the EULA ? (y/n) "
        read -r REPLY
        case "$REPLY" in
            y|Y)
                READ_EULA=1
                ;;
            n|N)
                READ_EULA=0
                EULA_REJECTED=1
                ;;
            *)
                REJECT_COUNT=$((REJECT_COUNT+1))
                if [ $REJECT_COUNT -eq 3 ]; then
                    REPLY=q
                    READ_EULA=0
                    EULA_REJECTED=1
                else
                    REPLY=
                fi
                ;;
        esac
    done

    # Ask if the user accepts the EULA if they read it
    if [ "$READ_EULA" = 1 ]; then
        more -d "${EULA_PATH}"
        echo
        REPLY=
        while [ -z "$REPLY" ]; do
            echo -n "Do you accept the EULA you just read? (y/n) "
            read -r REPLY
            case "$REPLY" in
                y|Y)
                    echo "EULA has been accepted."
                    mbl_eula_accept "${EULA_ACCEPT_ENV_VAR}" "${EULA_ACCEPT_BB_VAR}" "${EULA_ACCEPT_BB_VALUE}"
                    ;;
                n|N)
                    echo "EULA has not been accepted."
                    mbl_eula_reject "${EULA_ACCEPT_ENV_VAR}" "${EULA_ACCEPT_BB_VAR}"
                    EULA_REJECTED=1
                    ;;
                *)
                    REPLY=
                    ;;
            esac
        done
    fi

    return $EULA_REJECTED
}

##############################################################################
# Clean up all the variables and functions on finish
mbl_cleanup() {
        unset FILE_CHECKS MACHLAYERS OEROOT MANIFESTS STRIPPED_PATH
        unset DEFAULT_DISTRO usage oldmach olddistro
        unset mbl_eula_accept mbl_eula_reject mbl_eula_handle

        if [ -n "$BUILDDIR" ]; then
                export BUILDDIR
        fi
}

##############################################################################
# Perform the environment set up

trap mbl_cleanup RETURN

# Check number of arguments given
if [ $# -gt 1 ]; then
    usage
    return 2
fi

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..."
    return 1
fi

# Double check that some of the files we expect are present
FILE_CHECKS="conf/local.conf conf/bblayers.conf .repo/manifests layers"
for file in $FILE_CHECKS; do
    if [ ! -e "$file" ]; then
        echo "ERROR: $file not found"
        echo "Please check you are performing this setup in a repo checkout of the distro."
        return 1
    fi
done

if [ -z "$DISTRO" ]; then
    DISTRO="$DEFAULT_DISTRO"
fi

# Check for machine being set
if [ -z "$MACHINE" ]; then
    # Create a list of MBL machines "<machine>(<layer>)", sorted by <machine>
    MACHLAYERS=$(find layers -print | grep "conf/machine/.*\.conf" | grep meta-mbl | sed -e 's/\.conf//g' -e 's/layers\///' | awk -F'/conf/machine/' '{print $NF "(" $1 ")"}' | LANG=C sort)

    echo "Please use the following syntax:"
    echo "    MACHINE=<your-machine> . ./setup-environment"
    echo ""
    echo "Possible choices for MBL:"
    echo "$MACHLAYERS" | sed -e 's/(/ (/g' | sed -e 's/^ */\t/g'
    return
fi

if [ -z "${SDKMACHINE}" ]; then
    SDKMACHINE='x86_64'
fi

# Set up the OEROOT path
# Avoid symlinks as it can cause modules (such as lvm2) to fail to build
OEROOT=$(pwd -P)
cd "$OEROOT" || return 1

# Allow overwriting files and other shell options
if [ -n "$ZSH_VERSION" ]; then
    setopt sh_word_split
    setopt clobber
elif [ -n "$BASH_VERSION" ]; then
    set +o noclobber
fi

# Clean up PATH, because if it includes tokens to current directories
# wrong binaries can be used instead of the expected ones during task execution
STRIPPED_PATH=$(echo "${PATH}" | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//')
export PATH="${OEROOT}"/layers/openembedded-core/scripts:"${OEROOT}"/layers/meta-mbl/meta-mbl-distro/scripts:"${OEROOT}"/bitbake/bin:"${OEROOT}"/.repo/repo:"${STRIPPED_PATH}"
# Remove duplicate path entries
STRIPPED_PATH=$(echo "$PATH" | awk -F: '{for (i=1;i<=NF;i++) { if ( !x[$i]++ ) printf("%s:",$i); }}' | sed 's/:$//')
export PATH="${STRIPPED_PATH}"
# Make sure Bitbake doesn't filter out the following variables from our
# environment. Including allowing for a shared download directory (DL_DIR)
export BB_ENV_EXTRAWHITE="MACHINE DISTRO TCLIBC TCMODE GIT_PROXY_COMMAND http_proxy ftp_proxy https_proxy all_proxy ALL_PROXY no_proxy SSH_AGENT_PID SSH_AUTH_SOCK BB_SRCREV_POLICY SDKMACHINE BB_NUMBER_THREADS DL_DIR"

# We can be called with only 1 parameter max, <build> folder, or default to
# build-$distro
BUILDDIR=build-$DISTRO
if [ $# -eq 1 ]; then
    BUILDDIR=$1
fi
BUILDDIR=$OEROOT/$BUILDDIR

# Create the build directory (if it doesn't exist)
mkdir -p "${BUILDDIR}"/conf || return 1
cd "${BUILDDIR}" || return 1

# Get previous details of a build if they exist
if [ -f "conf/auto.conf" ]; then
    oldmach=$(grep -E "^MACHINE" "conf/auto.conf" | sed -e 's%^MACHINE ?= %%' | sed -e 's/^"//'  -e 's/"$//')
    olddistro=$(grep -E "^DISTRO" "conf/auto.conf" | sed -e 's%^DISTRO ?= %%' | sed -e 's/^"//'  -e 's/"$//')
fi
# Check if this is not the first environment setup (a checksum will exist)
# and the MACHINE and DISTRO are unchanged as we can skip the rest of the
# setup
if [ -e conf/checksum ] && [ "${MACHINE}" = "$oldmach" ] && [ "${DISTRO}" = "$olddistro" ]; then
    # Check that the checksum matches for the setup script
    if sha512sum --quiet -c conf/checksum > /dev/null 2>&1; then
        # Double check the EULA has been accepted
        mbl_eula_handle
        if [ $? -eq 1 ]; then
            echo "ERROR: EULA Has not been read and accepted."
            return 1
        fi
        # Checksum matches and EULA accepted, so we can exit early as we have
        # already performed a setup before for this DISTRO and MACHINE
       return
    fi
fi

if [ -f "conf/auto.conf" ]; then
    echo "Regenerating build environment due to DISTRO, MACHINE or SETUP changes"
fi

# Create a file to indicate if this setup has already been called
# and set a new checksum based on this script
sha512sum "${OEROOT}"/setup-environment-internal > conf/checksum

# Set up the local.conf for this build directory
ln -sf "${OEROOT}"/conf/local.conf conf/local.conf

# Setup the bblayers.conf
# Target specific BSP layers are specified in a bblayers_${MACHINE}.conf
# file. This environment setup script replaces the ##MACHINE## tag in
# bblayers.conf with that specified by MACHINE.
rm -f conf/bblayers*.conf
sed -e "s|##MACHINE##|$MACHINE|g"  "${OEROOT}"/conf/bblayers.conf > conf/bblayers.conf

# Add mbl-manifest readme link in build directory
MANIFESTS="${OEROOT}"/.repo/manifests
ln -sf "${MANIFESTS}"/README.md README.md

# Record the machine, distro settings
cat > conf/auto.conf <<EOF
DISTRO ?= "${DISTRO}"
MACHINE ?= "${MACHINE}"
SDKMACHINE ?= "${SDKMACHINE}"

# Extra options that can be changed by the user
INHERIT += "rm_work"
EOF

# Because we are (re-)generating the build conf files, ensure we remove
# all ACCEPT_EULA_MACHINE files to make sure we present the EULA to the user
rm -rf ACCEPT_EULA_*

# Perform the EULA processing which will update auto.conf as necessary
mbl_eula_handle
if [ $? -eq 1 ]; then
    echo "ERROR: EULA Has not been read and accepted."
    # Delete the auto.conf file as we haven't successfully completed a setup
    rm conf/auto.conf
    return 1
fi

# Set up the site configuration
if [ ! -e conf/site.conf ]; then
    cat > conf/site.conf <<_EOF

SCONF_VERSION = "1"

# Where to store sources
DL_DIR ?= "${OEROOT}/downloads"

# Where to save shared state
SSTATE_DIR ?= "${OEROOT}/sstate-cache"

TMPDIR = "${BUILDDIR}/tmp"

# Go through the Firewall
#HTTP_PROXY        = "http://${PROXYHOST}:${PROXYPORT}/"

_EOF
fi

# Finish with some welcome text
cat <<EOF

Welcome to Mbed Linux OS (MBL)

Your build environment has been configured with:

    MACHINE = ${MACHINE}
    SDKMACHINE = ${SDKMACHINE}
    DISTRO = ${DISTRO}

You can now run 'bitbake <target>'

Some of common targets are:
    mbl-image-production
    mbl-image-development

EOF
