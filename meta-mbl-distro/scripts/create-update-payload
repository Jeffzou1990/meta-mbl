#!/usr/bin/env python3
# Copyright (c) 2019 Arm Limited and Contributors. All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause


"""
This script will create an MBL update payload.

To use the script specify components to be added to the update payload using
command line options.

The script collects the necessary build artifacts from DEPLOY_DIR_IMAGE in your
MBL workspace and packages them in the MBL payload format.

Example invocation:

create-update-payload --bootloader-components 1 2 -o tmp/payload.swu

This will create the update payload containing bootloader component 1 and
bootloader component 2 and output the payload to tmp/payload.swu.

The script looks for the files in DEPLOY_DIR_IMAGE, you need to have an MBL
workspace set up and you must have sourced setup-environment.

We have to set the import path relative to this script so python can import the
bitbake and oe libs, the script cannot be moved from the
meta-mbl-distro/scripts folder, as the import paths are relative to the
location of this file.

The script must be executed from TOPDIR, which is the build directory created
when you source setup-environment, or bitbake can't resolve the paths it needs.

TOPDIR is ./mbl-manifest/build-mbl-development or
./mbl-manifest/build-mbl-production in the MBL workspace.
"""

import logging
import pathlib
import sys

from argparse import RawTextHelpFormatter

# Set the PYTHONPATH so we can import openembedded scripts/lib modules.
this_dir = pathlib.Path(__file__).resolve().parent
oe_scripts_path = (
    this_dir.parent.parent.parent / "openembedded-core" / "scripts"
)

oe_lib_path = oe_scripts_path / "lib"
sys.path.insert(0, str(oe_lib_path))

import scriptpath  # noqa: E402
import scriptutils  # noqa: E402

# This is needed so we can import bitbake modules.
bitbakepath = scriptpath.add_bitbake_lib_path()

import bb.tinfoil  # noqa: E402
import argparse_oe  # noqa: E402

mbl_lib_path = this_dir / "lib"
sys.path.insert(0, str(mbl_lib_path))

import mbl.update.payload  # noqa: E402


def parse_args():
    """Parse the command line arguments."""
    parser = argparse_oe.ArgumentParser(
        description=__doc__, formatter_class=RawTextHelpFormatter
    )
    parser.add_argument(
        "-b",
        "--bootloader-components",
        dest="bootloader_components",
        help="Add one or more bootloader components (N) to the payload.",
        metavar="N",
        nargs="+",
    )
    parser.add_argument(
        "-a",
        "--apps",
        dest="apps",
        help="Add one or more ipk files for apps to the payload",
        metavar="IPK_PATH",
        type=lambda x: pathlib.Path(x).absolute(),
        nargs="+",
    )
    parser.add_argument(
        "-k",
        "--kernel",
        help="Add the kernel image to the payload",
        action="store_true",
    )
    parser.add_argument(
        "-r",
        "--rootfs",
        help="Add the root file system to the payload, must provide the image "
        "name e.g mbl-image-development",
        metavar="IMAGE_NAME",
    )
    parser.add_argument(
        "-o",
        "--output-path",
        type=lambda x: pathlib.Path(x).absolute(),
        default="payload.swu",
        help="Output path for the update payload.",
        metavar="PATH",
    )
    parser.add_argument(
        "-t", "--testinfo", help="Generate a testinfo file", metavar="PATH"
    )
    parser.add_argument(
        "-v", "--verbose", action="store_true", help="Emit verbose output"
    )

    args = parser.parse_args()
    if (
        args.bootloader_components is None
        and args.apps is None
        and not args.kernel
        and not args.rootfs
    ):
        parser.error("No input arguments given.")

    if args.verbose:
        logging.getLogger().setLevel(logging.INFO)

    return args


def main(args):
    """
    Entry point.

    :param args Namespace: argparse Namespace object.
    """
    with bb.tinfoil.Tinfoil() as tinfoil:
        try:
            tinfoil.prepare(config_only=True)
            # Tinfoil throws a SystemExit when it can't find the Layer
            # Directory. This error means the CWD is probably incorrect.
        except SystemExit:
            bb.fatal(
                "Your current working directory must be $TOPDIR, i.e the "
                "build directory, to run this script. If you want to run "
                "this script, or bitbake, from outside the build directory, "
                "you must set $BBPATH to point to the build directory. For "
                "more information see the Yocto mega manual: "
                "https://www.yoctoproject.org/docs/latest/mega-manual/"
                "mega-manual.html#var-BBPATH"
            )

        payload = mbl.update.payload.UpdatePayload(
            tinfoil=tinfoil,
            bootloader_components=args.bootloader_components,
            kernel=args.kernel,
            rootfs=args.rootfs,
            apps=args.apps,
        )
        payload.create_payload_file(args.output_path)

        if args.testinfo:
            payload.create_testinfo_file(args.testinfo)


if __name__ == "__main__":
    sys.exit(main(parse_args()))
